// Prisma schema for Zenite v2
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String?
  hashedPassword String?
  avatarUrl      String?
  role           String    @default("user")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastSeenAt     DateTime?

  // relations
  ownedTasks    Task[]       @relation("TaskOwner")
  ownedProjects Project[]    @relation("ProjectOwner")
  comments      Comment[]
  attachments   Attachment[]
  // next-auth relations
  accounts      Account[]
  sessions      Session[]
}

model Task {
  id            String       @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus   @default(TODO)
  priority      Priority     @default(MEDIUM)
  dueDate       DateTime?
  startsAt      DateTime?
  completedAt   DateTime?
  estimateMins  Int?
  timeSpentMins Int?
  recurrence    String?
  ownerId       String
  owner         User         @relation("TaskOwner", fields: [ownerId], references: [id])
  tags          Tag[]
  comments      Comment[]
  attachments   Attachment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  projectId     String?
  project       Project?     @relation("ProjectTasks", fields: [projectId], references: [id])

  @@index([ownerId])
  @@index([status])
  @@index([dueDate])
}

model Tag {
  id    String  @id @default(uuid())
  name  String  @unique
  color String?
  tasks Task[]
}

model Comment {
  id        String   @id @default(uuid())
  taskId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task @relation(fields: [taskId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  @@index([taskId])
  @@index([authorId])
}

model Attachment {
  id         String   @id @default(uuid())
  taskId     String
  uploaderId String
  url        String
  filename   String?
  size       Int?
  mimeType   String?
  createdAt  DateTime @default(now())

  task     Task @relation(fields: [taskId], references: [id])
  uploader User @relation(fields: [uploaderId], references: [id])

  @@index([taskId])
  @@index([uploaderId])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks Task[] @relation("ProjectTasks")

  @@index([ownerId])
}

// Snapshot of completed tasks for a particular date used by the activity heatmap
model Activity {
  id        String   @id @default(uuid())
  date      String // YYYY-MM-DD local date bucket
  taskId    String? // optional link to the task that generated this entry
  taskTitle String
  ownerId   String?
  createdAt DateTime @default(now())

  @@index([date])
  @@index([ownerId])
}

// Models required by NextAuth.js
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
